openapi: 3.0.0
info:
  title: Node.js Express TypeScript PostgreSQL Boilerplate API
  description: >
    A boilerplate project for building RESTful APIs using Node.js, Express, TypeScript, and PostgreSQL.
    This project provides a starting point for developing robust and scalable web applications with a well-defined structure.
  version: 1.0.0
  contact:
    name: API Support
    url: https://github.com/arisculala
    email: arisculala@gmail.com
servers:
  - url: http://localhost:3000
    description: Local development server

tags:
  - name: Healthcheck
    description: Endpoints for health checking
  - name: Users
    description: Endpoints for user management

paths:
  /api/healthcheck/liveness:
    get:
      summary: Health check endpoint
      tags:
        - Healthcheck
      description: Verifies if the application is live.
      responses:
        '200':
          description: Application is live
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Service Unavailable
  /api/healthcheck/readiness:
    get:
      summary: Readiness check endpoint
      tags:
        - Healthcheck
      description: Verifies if the application and its dependencies are ready.
      responses:
        '200':
          description: All dependencies are ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  dependencies:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: DB
                        status:
                          type: string
                          example: OK
                        error:
                          type: string
                          example: ""
        '503':
          description: One or more dependencies are not ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Service Unavailable
                  dependencies:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: DB
                        status:
                          type: string
                          example: Service Unavailable
                        error:
                          type: string
                          example: DB connection is not established
  /api/users:
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: Successfully created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Bad Request Validation error
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          example: "\"lastName\" is required"
                        path:
                          type: array
                          items:
                            type: string
                          example: ["lastName"]
                        type:
                          type: string
                          example: any.required
                        context:
                          type: object
                          properties:
                            label:
                              type: string
                              example: lastName
                            key:
                              type: string
                              example: lastName
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: CREATE_NEW_USER_ERROR
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Error creating new user
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          example: "duplicate key value violates unique constraint \"users_email_key\""
    get:
      summary: Get users with optional filters and pagination
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: Page number for pagination (default 1)
          required: false
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of items per page (default 10, max 50)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            example: 10
        - name: deleted
          in: query
          description: Filter by deleted status (default false)
          required: false
          schema:
            type: boolean
            example: false
        - name: is2FaEnable
          in: query
          description: Filter by two-factor authentication status (default false)
          required: false
          schema:
            type: boolean
            example: false
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      perPage:
                        type: integer
                        example: 10
                      totalPages:
                        type: integer
                        example: 1
                      totalItems:
                        type: integer
                        example: 1
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '404':
          description: No users found
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      perPage:
                        type: integer
                        example: 10
                      totalPages:
                        type: integer
                        example: 0
                      totalItems:
                        type: integer
                        example: 0
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
  /api/users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier for the user
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Bad Request Validation error
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          example: "\"id\" must be a valid GUID"
                        path:
                          type: array
                          items:
                            type: string
                          example: ["id"]
                        type:
                          type: string
                          example: string.guid
                        context:
                          type: object
                          properties:
                            label:
                              type: string
                              example: id
                            value:
                              type: string
                              example: "b4969529-a0b7-4da0-b737-0490ac157a77d"
                            key:
                              type: string
                              example: id
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: USER_NOT_FOUND_ERROR
                  status:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: User with id b4969529-a0b7-4da0-b737-0490ac157a76 not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
    patch:
      summary: Update user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier for the user
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Bad Request Validation error
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          example: "\"id\" must be a valid GUID"
                        path:
                          type: array
                          items:
                            type: string
                          example: ["id"]
                        type:
                          type: string
                          example: string.guid
                        context:
                          type: object
                          properties:
                            label:
                              type: string
                              example: id
                            value:
                              type: string
                              example: "4d69ee77-2fa3-4934-a009-517ecc8ca94ed"
                            key:
                              type: string
                              example: id
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: USER_NOT_FOUND_ERROR
                  status:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: User with id 2dc68d2f-b0f2-4f84-b8f3-aeaeca94d75b not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: Internal Server Error
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: The server encountered an error and could not complete your request.

components:
  schemas:
    NewUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        username:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          format: email
          description: Email address of the user
        phoneNumber:
          type: string
          description: Phone number of the user
        username:
          type: string
          description: Username for login
        password:
          type: string
          description: User's password
        deleted:
          type: boolean
          description: Indicates if the user is deleted
          default: false
        is2FaEnable:
          type: boolean
          description: Indicates if two-factor authentication is enabled
          default: false
        createdAt:
          type: string
          format: date-time
          description: Date and time when the user was created
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the user was last updated

  responses:
    NotFound:
      description: Resource not found
    Unauthorized:
      description: Unauthorized access
    BadRequest:
      description: Bad request

